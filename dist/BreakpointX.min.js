/**
 * BreakpointX JavaScript Module v0.1
 * 
 *
 * Define responsive breakpoints, register callbacks when crossing, with optional css class handling.
 *
 * Copyright 2015, Aaron Klump <sourcecode@intheloftstudios.com>
 * @license Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Date: Tue Nov  3 07:02:40 PST 2015
 */
var BreakpointX=function($){function t(t,i){this.version="0.1",this.settings=$.extend({},this.options,i),this.current=null,this.last={},this.actions={},this.breakpoints={},this.aliases=[],this.init(t)}return t.prototype.options={addClassesTo:null,classPrefix:"breakpointx-"},t.prototype.init=function(t){var i=this;if("object"!=typeof t)throw new Error("breakpoints must be an object in this format: {alias: width, alias2: width} where width is the viewport width when the viewport begins, i.e., minimum width.");i.aliases=[];var s=[],a,n;for(a in t)n=parseInt(t[a],10),s.push([a,n]);s.sort(function(t,i){return t[1]-i[1]});for(var e in s){e*=1,minWidth=s[e][1],a=s[e][0],i.aliases.push(a);var r="undefined"==typeof s[e+1]?null:s[e+1][1]-1;i.breakpoints[a]=[minWidth,r]}if(i.reset(),this.settings.addClassesTo&&i.add("both",this.aliases,this.classHandler),i.actions.hasOwnProperty("bigger")||i.actions.hasOwnProperty("smaller")||i.actions.hasOwnProperty("both")){var o=window.innerWidth;i.callbacksHandler(o,!0),$(window).resize(function(){o=window.innerWidth,i.callbacksHandler(o)})}return i},t.prototype.classHandler=function(t,i,s,a){$el=a.settings.addClassesTo instanceof jQuery?a.settings.addClassesTo:$(a.settings.addClassesTo);var n=a.settings.classPrefix;$el.removeClass(n+"smaller").removeClass(n+"larger").removeClass(n+t.name).addClass(n+i.name),s&&$el.addClass(n+s)},t.prototype.callbacksHandler=function(t,i){var s=this,a=s.alias(t),n=a!==s.last.alias;if(n||i){var e=n?t>s.last.width?"bigger":"smaller":null,r=[s.actions.both];e&&(r.push=slef.actions[e]),s.last={width:s.value(a),alias:a,direction:e},s.current=a;for(var o in r){var l={minWidth:s.breakpoints[s.last.alias][0],maxWidth:s.breakpoints[s.last.alias][1],name:s.last.alias},h={minWidth:s.breakpoints[a][0],maxWidth:s.breakpoints[a][1],name:a};for(var d in r[o][a])r[o][a][d](l,h,e,s)}}},t.prototype.reset=function(){return this.actions={bigger:[],smaller:[],both:[]},this.last={width:null,alias:null,direction:null},this.last.alias=this.alias(window.innerWidth),this.last.width=this.value(this.last.alias),this.current=this.last.alias,this},t.prototype.alias=function(t){var i;for(var s in this.breakpoints){var a=this.breakpoints[s][0];if(i=i||s,a>t)return i;i=s}return i},t.prototype.value=function(t){return"undefined"==typeof this.breakpoints[t]?null:this.breakpoints[t]},t.prototype.add=function(t,i,s){var a=this;if("undefined"==typeof a.actions[t])throw new Error("Invalid direction: "+t);if(i.length<1)throw new Error("breakpoints must be an array with at least one alias.");if("function"!=typeof s)throw new Error("callback must be a function");for(var n in i){var e=i[n];if(-1===a.aliases.indexOf(e))throw new Error('Unregistered breakpoint alias: "'+e+'"');a.actions[t][e]=a.actions[t][e]||[],a.actions[t][e].push(s)}return this},t}(jQuery);